tab
# méthodes de calcul de la p-value bilatérale
# les p-valeurs sont égales à pbil
fisher.test(tab)
fisher.test(tab, alternative = "two.sided")
# méthode de calcul de la p-value unilatérale
fisher.test(tab, alternative = "greater") # égale à puni
fisher.test(tab, alternative = "less")
#4
resultat=chisq.test(tab, correct=FALSE) #test du Khi2
resultat$expected #effectifs théoriques
resultat #p-value
resultat2=chisq.test(tab, correct=TRUE) #test du Khi2 avec correction
resultat2$expected #effectifs théoriques
resultat2 #p-value
p = rep(0,k+1) # initialisation d'un tableau de taille 16
p[(1+max(0,k-n)):(1+min(k,m))] = phyper(seq(max(0,k-n),min(k,m),1),m,n,k,lower.tail=FALSE)
p[(1+max(0,k-n)):(1+min(k,m))] # valeurs des probabilités critiques (P (X > k))
p = phyper(seq(0,15,1),m,n,k,lower.tail=FALSE)
#p[(1+max(0,k-n)):(1+min(k,m))] = phyper(seq(max(0,k-n),min(k,m),1),m,n,k,lower.tail=FALSE)
#p[(1+max(0,k-n)):(1+min(k,m))]
p = phyper(seq(0,15,1),m,n,k,lower.tail=FALSE) # valeurs des probabilités critiques (P (X > k))
p = phyper(seq(0,15,1),m,n,k,lower.tail=FALSE) # valeurs des probabilités critiques (P (X > k))
p
p = phyper(seq(0,15,1),m,n,k,lower.tail=FALSE) # valeurs des probabilités critiques (P (X > k))
p
puni=p[obs]
puni
tab=matrix(c(obs,m-obs,k-obs,n-(k-obs)),nrow=2,ncol=2) #création d'un tableau 2D
tab
fisher.test(tab, alternative = "two.sided")
n=1000 #nombre de termes dans la somme
nn=seq(1,n)
M=1000 #nombre de réplications
alpha=1/3 #alpha=1/3-->Cantor, alpha=1/2-->Uniforme
mc<-c()
#x=as.integer(abs(rcauchy(N)))
#y=as.integer(abs(rcauchy(N)))
for(j in 1:M){
epsilon=rbinom(n,1,0.5)
obs=(1-alpha)/alpha*cumsum(epsilon*alpha^nn)
mc<-c(mc,obs)
}
plot.ecdf(mc,xlim=c(0,1))
#hist(z,freq=FALSE)
#lines(density(z))
#Z=(z-mean(z))/sd(z)
#print(shapiro.test(Z))
plot.ecdf(mc,xlim=c(0,1))
epsilon=rbinom(n,1,0.5)
obs=(1-alpha)/alpha*cumsum(epsilon*alpha^nn)
mc<-c(mc,obs)
n=1000 #nombre de termes dans la somme
nn=seq(1,n)
M=1000 #nombre de réplications
alpha=1/3 #alpha=1/3-->Cantor, alpha=1/2-->Uniforme
mc<-c()
#x=as.integer(abs(rcauchy(N)))
#y=as.integer(abs(rcauchy(N)))
for(j in 1:M){
epsilon=rbinom(n,1,0.5)
obs=(1-alpha)/(alpha*cumsum(epsilon*alpha^nn))
mc<-c(mc,obs)
}
plot.ecdf(mc,xlim=c(0,1))
#hist(z,freq=FALSE)
#lines(density(z))
#Z=(z-mean(z))/sd(z)
#print(shapiro.test(Z))
obs=(1-alpha)/alpha*cumsum(epsilon*alpha^nn)
mc<-c(mc,obs)
obs=(1-alpha)/alpha*(cumsum(epsilon*alpha^nn))
n=1000 #nombre de termes dans la somme
nn=seq(1,n)
M=1000 #nombre de réplications
alpha=1/3 #alpha=1/3-->Cantor, alpha=1/2-->Uniforme
mc<-c()
#x=as.integer(abs(rcauchy(N)))
#y=as.integer(abs(rcauchy(N)))
for(j in 1:M){
epsilon=rbinom(n,1,0.5)
obs=(1-alpha)/alpha*(cumsum(epsilon*alpha^nn))
mc<-c(mc,obs)
}
plot.ecdf(mc,xlim=c(0,1))
#hist(z,freq=FALSE)
#lines(density(z))
#Z=(z-mean(z))/sd(z)
#print(shapiro.test(Z))
obs=((1-alpha)/alpha)*cumsum(epsilon*alpha^nn)
n=1000 #nombre de termes dans la somme
nn=seq(1,n)
M=1000 #nombre de réplications
alpha=1/3 #alpha=1/3-->Cantor, alpha=1/2-->Uniforme
mc<-c()
#x=as.integer(abs(rcauchy(N)))
#y=as.integer(abs(rcauchy(N)))
for(j in 1:M){
epsilon=rbinom(n,1,0.5)
obs=((1-alpha)/alpha)*cumsum(epsilon*alpha^nn)
mc<-c(mc,obs)
}
plot.ecdf(mc,xlim=c(0,1))
#hist(z,freq=FALSE)
#lines(density(z))
#Z=(z-mean(z))/sd(z)
#print(shapiro.test(Z))
n=1000 #nombre de termes dans la somme
nn=seq(1,n)
M=1000 #nombre de réplications
alpha=1/3 #alpha=1/3-->Cantor, alpha=1/2-->Uniforme
mc<-c()
#x=as.integer(abs(rcauchy(N)))
#y=as.integer(abs(rcauchy(N)))
for(j in 1:M){
epsilon=rbinom(n,1,0.5)
obs=((1-alpha)/alpha)*cumsum(epsilon*alpha^nn)
mc<-c(mc,obs)
}
plot.ecdf(mc,xlim=c(0,1))
#hist(z,freq=FALSE)
#lines(density(z))
#Z=(z-mean(z))/sd(z)
#print(shapiro.test(Z))
n=1000 #nombre de termes dans la somme
nn=seq(1,n)
M=1000 #nombre de réplications
alpha=1/3 #alpha=1/3-->Cantor, alpha=1/2-->Uniforme
mc<-c()
#x=as.integer(abs(rcauchy(N)))
#y=as.integer(abs(rcauchy(N)))
for(j in 1:M){
epsilon=rbinom(n,1,0.5)
obs=((1-alpha)/alpha)*cumsum(epsilon*alpha^nn)
mc<-c(mc,obs)
}
plot.ecdf(mc,xlim=c(0,1))
#hist(z,freq=FALSE)
#lines(density(z))
#Z=(z-mean(z))/sd(z)
#print(shapiro.test(Z))
n=1000 #nombre de termes dans la somme
nn=seq(1,n)
M=1000 #nombre de réplications
alpha=1/3 #alpha=1/3-->Cantor, alpha=1/2-->Uniforme
mc<-c()
#x=as.integer(abs(rcauchy(N)))
#y=as.integer(abs(rcauchy(N)))
for(j in 1:M){
epsilon=rbinom(n,1,0.5)
obs=(1-alpha)/alpha*cumsum(epsilon*alpha^nn)
mc<-c(mc,obs)
}
plot.ecdf(mc,xlim=c(0,1))
#hist(z,freq=FALSE)
#lines(density(z))
#Z=(z-mean(z))/sd(z)
#print(shapiro.test(Z))
obs=(1-alpha)/(alpha*cumsum(epsilon*alpha^nn))
n=1000 #nombre de termes dans la somme
nn=seq(1,n)
M=1000 #nombre de réplications
alpha=1/3 #alpha=1/3-->Cantor, alpha=1/2-->Uniforme
mc<-c()
#x=as.integer(abs(rcauchy(N)))
#y=as.integer(abs(rcauchy(N)))
for(j in 1:M){
epsilon=rbinom(n,1,0.5)
obs=(1-alpha)/alpha*cumsum(epsilon*alpha^nn)
mc<-c(mc,obs)
}
plot.ecdf(mc,xlim=c(0,1))
#hist(z,freq=FALSE)
#lines(density(z))
#Z=(z-mean(z))/sd(z)
#print(shapiro.test(Z))
obs=(1-alpha)/alpha*cumsum(epsilon*alpha^nn)
(obs)
n=1000 #nombre de termes dans la somme
nn=seq(1,n)
M=1000 #nombre de réplications
alpha=1/3 #alpha=1/3-->Cantor, alpha=1/2-->Uniforme
mc<-c()
#x=as.integer(abs(rcauchy(N)))
#y=as.integer(abs(rcauchy(N)))
for(j in 1:M){
epsilon=rbinom(n,1,0.5)
obs=(1-alpha)/alpha*cumsum(epsilon*alpha^nn)
mc<-c(mc,obs)
}
plot.ecdf(mc,xlim=c(0,1))
#hist(z,freq=FALSE)
#lines(density(z))
#Z=(z-mean(z))/sd(z)
#print(shapiro.test(Z))
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma)
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
# Autocorrélogramme de (S_t)
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma)
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
# Autocorrélogramme de (S_t)
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma)
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
# Autocorrélogramme de (S_t)
# Autocorrélogramme de (S_t)
acf(S)
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma)
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="blue")
# Autocorrélogramme de (S_t)
acf(S)
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma)
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="blue")
# Autocorrélogramme de (S_t)
#acf(S)
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma)
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="blue")
# Autocorrélogramme de (S_t)
acf(S)
plot(X, type="l", col="red")
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="blue")
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="blue")
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="blue")
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma) # n, mean, sd
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="red")
# Autocorrélogramme de (S_t)
acf(S)
plot(X, type="l", col="red")
# Visualisation de (S_t)
plot(S, type="l", col="red")
(S)
(S)
acf(S)
# Ex 1
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma) # n, mean, sd
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="red")
# Autocorrélogramme de (S_t)
#
acf(S)
# Ex 1
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma) # n, mean, sd
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="red")
# Autocorrélogramme de (S_t)
#
acf(S)
# Ex 1
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma) # n, mean, sd
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="red")
# Autocorrélogramme de (S_t)
#
acf(S)
# Ex 1
# Initialisation des valeurs
n <- 1000
sigma <- 1
# Générer un bruit blanc, par ex : réalisations d'un v.a de distribution N(0,sigma)
X <- rnorm(n, 0, sigma) # n, mean, sd
# Visualisation du bruit blanc généré
plot(X, type="l", col="red")
# Autocorrélogramme du BB
acf(X)
# Réalisation du processus (S_t)
?cumsum()
# Générer S_t en fonction de (X_t)
S = cumsum(X)
# Visualisation de (S_t)
plot(S, type="l", col="red")
# Autocorrélogramme de (S_t)
acf
# Ex 3
#...
n = 1000
sigma2 = 2
#...
X = rnorm(n,0,sqrt(sigma2))
#...
res = acf(X)
hat_rho = rep(0,31)
#...
for (h in 0:30) {
hat_rho[h+1] = cor(X[1:(n-h)], X[(1+h):n])
}
#...
plot(res$acf[2:31],hat_rho[2:31], type="p")
# visuellement
acf(X)
points(hat_rho[2:31], col="red")
res = acf(X)
typeof(res)
View(res)
View(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
n = 1000 # nb obs
sigma2 = 2 # var
#...
X = rnorm(n,0,sqrt(sigma2)) # générer aléatoirement n réalisations, mean=0 échantillon centré
res = acf(X)
print(res)
res = acf(X)
print(res)
res = acf(X)
print(res)
#...
res = acf(X)
print(res) # autocorrélations calculées
hat_rho = rep(0,31)
print(hat_rho)
print(hat_rho)
for (h in 0:30) {
hat_rho[h+1] = cor(X[1:(n-h)], X[(1+h):n])
}
plot(res$acf[2:31],hat_rho[2:31], type="p")
plot(res$acf[2:31],hat_rho[2:31], type="p")
acf(X)
points(hat_rho[2:31], col="red")
(X)
acf(X)
points(hat_rho[2:31], col="red")
# Charger les bibliothèques nécessaires
library(rpart)
library(rpart.plot)
# Charger les données
data <- read.csv("data.csv")
setwd("C:/Users/a/Desktop/MIASHS/S6/TER/CARF-RF")
# Charger les bibliothèques nécessaires
library(rpart)
library(rpart.plot)
# Charger les données
data <- read.csv("data.csv")
# Convertir la colonne Y en facteur
data$Y <- as.factor(data$Y)
# Construire l'arbre de décision avec la méthode rpart
arbre_decision_rpart <- rpart(Y ~ X1 + X2, data=data, method="class", parms=list(split="gini"), control=rpart.control(minsplit=1, cp=0.01))
# Afficher l'arbre de décision étape par étape
rpart.plot(arbre_decision_rpart, type=4, extra=101, fallen.leaves=FALSE, under=TRUE)
# Charger les bibliothèques nécessaires
library(rpart)
library(rpart.plot)
# Charger les données
data <- read.csv("data_1.csv")
# Convertir la colonne Y en facteur
data$Y <- as.factor(data$Y)
# Construire l'arbre de décision avec la méthode rpart
arbre_decision_rpart <- rpart(Y ~ X1 + X2, data=data, method="class", parms=list(split="gini"), control=rpart.control(minsplit=1, cp=0.01))
# Afficher l'arbre de décision étape par étape
rpart.plot(arbre_decision_rpart, type=4, extra=101, fallen.leaves=FALSE, under=TRUE)
